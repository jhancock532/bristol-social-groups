# Generated by Django 5.1.5 on 2025-02-03 15:27

import django.core.validators
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0094_alter_page_locale'),
    ]

    operations = [
        migrations.CreateModel(
            name='GroupPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('description', models.TextField(help_text='A one or two sentence description of the group')),
                ('details', wagtail.fields.RichTextField(blank=True, help_text='Extended description displayed on the group page')),
                ('gender', models.CharField(blank=True, help_text='Leave blank for all genders', max_length=50)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='GroupLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('type', models.CharField(choices=[('Discord', 'Discord'), ('WhatsApp', 'WhatsApp'), ('Meetup', 'Meetup'), ('Facebook', 'Facebook'), ('Instagram', 'Instagram'), ('TikTok', 'TikTok'), ('Website', 'Website')], max_length=50)),
                ('url', models.URLField()),
                ('text', models.CharField(blank=True, max_length=100)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='group.grouppage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('details', wagtail.fields.RichTextField(blank=True)),
                ('frequency', models.CharField(choices=[('weekly', 'Weekly'), ('fortnightly', 'Fortnightly'), ('monthly', 'Monthly'), ('other', 'Other')], max_length=50)),
                ('frequency_other', models.CharField(blank=True, help_text='If Other, please specify frequency', max_length=50)),
                ('weekday', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=20)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('time_details', models.TextField(blank=True, help_text='Any additional timing information')),
                ('address', models.CharField(blank=True, max_length=250, null=True)),
                ('location', models.CharField(blank=True, max_length=250, null=True)),
                ('google_maps_link', models.URLField(blank=True)),
                ('location_details', models.TextField(blank=True, help_text='Additional location instructions or details')),
                ('location_url', models.URLField(blank=True, help_text='Optional link to venue website')),
                ('session_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('cost_details', models.TextField(blank=True)),
                ('booking_required', models.CharField(choices=[('not_required', 'Not required'), ('advised', 'Advised'), ('required', 'Required')], max_length=20)),
                ('booking_details', models.TextField(blank=True)),
                ('gender', models.CharField(blank=True, choices=[('all', 'All Welcome'), ('women_only', 'Women Only'), ('men_only', 'Men Only'), ('other', 'Other')], default='all', max_length=50)),
                ('accessibility', models.TextField(blank=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='group.grouppage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='group.grouppage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='grouppage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='group.GroupPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='GroupSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('frequency', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], max_length=20)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('cost_per_event', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('offers_discount_on_event_cost', models.BooleanField(default=False)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='group.grouppage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
